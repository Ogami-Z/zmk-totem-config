#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FUN  4
#define BRCKT 5
#define BUT  6
#define GAME 7
#define HYPER &kp LS(LC(LA(LGUI)))

&caps_word { continue-list = <UNDERSCORE MINUS>; };

&mt {
    quick-tap-ms = <150>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <170>;
            hold-trigger-key-positions = <5 6 7 15 16 17 26 27 28 36 37 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <170>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
            hold-trigger-on-release;
        };

        hmrc: homerow_mods_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_CUSTOM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <205>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
            hold-trigger-on-release;
        };

        hmla: homerow_mods_a_key {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_A";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <185>;
            hold-trigger-key-positions = <5 6 7 15 16 17 26 27 28 36 37 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            hold-trigger-on-release;
        };

        tgl_num: tgl_num {
            compatible = "zmk,behavior-toggle-layer";
            label = "TGL_NUM";
            #binding-cells = <1>;
        };

        tgl_numb_off: tgl_numb_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "TGL_NUMB_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        th1: th1 {
            compatible = "zmk,behavior-hold-tap";
            label = "TH1";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td1: td1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1";
            #binding-cells = <0>;
            bindings = <&lt 1 NUMBER_1>, <&kp NUMBER_2>, <&kp NUMBER_3>;
        };

        th2: th2 {
            compatible = "zmk,behavior-hold-tap";
            label = "TH2";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        focus_next_win {
            bindings = <&kp LG(TILDE)>;
            key-positions = <8 7>;
            require-prior-idle-ms = <260>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <7 6>;
            require-prior-idle-ms = <260>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <5 6>;
            require-prior-idle-ms = <260>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            require-prior-idle-ms = <260>;
        };

        question_mark {
            bindings = <&kp QUESTION>;
            key-positions = <29 28>;
            require-prior-idle-ms = <260>;
        };

        forward_slash {
            bindings = <&kp SLASH>;
            key-positions = <28 27>;
            require-prior-idle-ms = <260>;
        };

        move_file {
            bindings = <&kp LG(LA(V))>;
            key-positions = <5 6 7>;
        };

        screenshot {
            bindings = <&kp LS(LG(NUMBER_3))>;
            key-positions = <3 2 1>;
        };

        screenshot_select {
            bindings = <&kp LS(LG(NUMBER_4))>;
            key-positions = <4 3 2>;
        };

        single_quotes {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <23 22>;
        };

        double_quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <24 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";

            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃ Q         ┃ W         ┃ E         ┃ R         ┃ T         ┃   ┃ Y         ┃ U         ┃ I         ┃ O         ┃ P         ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ A         ┃ S         ┃ D         ┃ F         ┃ G         ┃   ┃ H         ┃ J         ┃ K         ┃ L         ┃ ;         ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃ HYPER     ┃ Z         ┃ X         ┃ C         ┃ V         ┃ B         ┃   ┃ N         ┃ M         ┃ ,         ┃ .         ┃ '         ┃ '         ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃ ESC       ┃ -         ┃ TAB       ┃   ┃ ENTER     ┃ SPACE     ┃ BACKSPACE ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
       &kp Q                 &kp W            &kp E            &kp R                             &kp T        &kp Y        &kp U              &kp I                     &kp O              &kp P
       &hmla LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LSHFT F                      &kp G        &kp H        &hmr RSHFT J       &hmr RIGHT_GUI K          &hmrc RIGHT_ALT L  &hmrc RIGHT_CONTROL ENTER
&mo 1  &kp Z                 &kp X            &kp C            &kp V                             &kp B        &kp N        &kp M              &kp COMMA                 &kp DOT            &kp BACKSPACE              &lt 4 ESC
                                              &mo 3            &th2 LS(LA(LC(RIGHT_GUI))) SPACE  &lt 2 TAB    &lt 3 SPACE  &lt 1 RIGHT_SHIFT  &kp LS(LA(LC(LEFT_GUI)))
            >;
        };

        num_layer {
            display-name = "Num";

            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃ UNDO      ┃ CUT       ┃ COPY      ┃ PASTE     ┃ REDO      ┃   ┃ REDO      ┃ PASTE     ┃ COPY      ┃ CUT       ┃ UNDO      ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ SUPER     ┃ CTRL      ┃ ALT       ┃ SHIFT     ┃           ┃   ┃ ←         ┃ ↓         ┃ ↑         ┃ →         ┃ CAPS WRD  ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃ UNDO      ┃ CUT       ┃ COPY      ┃ PASTE     ┃ REDO      ┃   ┃ INSERT    ┃ PG DOWN   ┃ PG UP     ┃ HOME      ┃ END       ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃           ┃           ┃   ┃ ENTER     ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
       &kp NUMBER_1      &kp NUMBER_2      &kp NUMBER_3       &kp NUMBER_4      &kp N5        &kp NUMBER_6  &kp N7    &kp N8              &kp N9                 &kp N0
       &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)   &kp LC(NUMBER_4)  &kp LC(N5)    &kp LEFT      &kp DOWN  &kp UP              &kp RIGHT              &kp ENTER
&to 0  &kp LC(NUMBER_6)  &kp LC(N7)        &kp C_VOLUME_DOWN  &kp C_VOL_UP      &kp K_MUTE    &kp HOME      &kp END   &th1 PAGE_UP COMMA  &th1 PAGE_DOWN PERIOD  &kp BACKSPACE  &none
                                           &none              &kp SPACE         &kp TAB       &trans        &none     &none
            >;
        };

        sym_layer {
            display-name = "Symbols";
            bindings = <
        &kp EXCLAMATION    &kp AT_SIGN        &kp HASH         &kp DOLLAR             &kp PERCENT    &kp CARET      &kp AMPS   &kp STAR   &kp GRAVE  &kp TILDE
        &kp DOUBLE_QUOTES  &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &none          &kp SLASH      &kp MINUS  &kp EQUAL  &kp COLON  &kp SEMI
&trans  &kp SINGLE_QUOTE   &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &none          &kp BACKSLASH  &kp UNDER  &kp PLUS   &kp PIPE   &kp QUESTION  &none
                                              &none            &none                  &none          &kp BSLH       &kp N0     &kp EQUAL
            >;
        };

        logic_layer {
            display-name = "Todo";
            bindings = <
       &kp LS(LC(BACKSLASH))  &kp LA(DOWN_ARROW)  &kp LA(UP_ARROW)  &kp LA(LS(DOWN_ARROW))  &kp LA(LS(UP_ARROW))    &trans  &trans     &trans    &trans     &trans
       &kp LG(LA(A))          &kp LA(LG(S))       &kp LG(LS(U))     &kp LS(LG(F))           &kp LG(LS(G))           &trans  &kp RSHFT  &kp RALT  &kp RCTRL  &kp RGUI
&none  &kp M                  &kp LC(LS(M))       &kp LA(LS(C))     &kp LS(LA(N))           &kp LC(LG(B))           &trans  &trans     &trans    &trans     &trans    &trans
                                                  &none             &none                   &none                   &none   &trans     &none
            >;
        };

        fun_layer {
            display-name = "Functions";
            bindings = <
       &to 0       &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP  &kp PSCRN       &none  &kp F4        &kp F5        &kp F9  &kp 12
       &none       &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_STOP      &none  &kp F1        &kp F2        &kp F3  &kp F11
&to 6  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3    &none  &kp F8        &kp F6        &kp F7  &kp F10  &trans
                                 &trans            &none         &none           &none  &kp C_BRI_DN  &kp C_BRI_UP
            >;
        };

        brckt_layer {
            display-name = "Brackets";
            bindings = <
        &trans     &kp DOT    &kp STAR   &kp AMPS     &kp PLUS       &kp ASTRK  &kp LBKT   &kp CARET  &kp RBKT  &none
        &kp COLON  &kp QMARK  &kp EXCL   &kp SLASH    &kp PIPE       &kp QMARK  &kp LPAR   &kp DLLR   &kp RPAR  &none
&trans  &kp UNDER  &kp GRAVE  &kp TILDE  &kp PERCENT  &kp AT_SIGN    &kp PIPE   &kp LBRC   &kp HASH   &kp RBRC  &none  &none
                              &none      &trans       &none          &kp ENTER  &kp SLASH  &kp DEL
            >;
        };

        but_layer {
            display-name = "Buttons";

            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃ UNDO      ┃ CUT       ┃ COPY      ┃ PASTE     ┃ REDO      ┃   ┃ REDO      ┃ PASTE     ┃ COPY      ┃ CUT       ┃ UNDO      ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ SUPER     ┃ CTRL      ┃ ALT       ┃ SHIFT     ┃ BASE LAY  ┃   ┃ BASE LAY  ┃ SHIFT     ┃ ALT       ┃ CTRL      ┃ SUPER     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃ SOFT OFF  ┃ UNDO      ┃ CUT       ┃ COPY      ┃ PASTE     ┃ REDO      ┃   ┃ REDO      ┃ PASTE     ┃ COPY      ┃ CUT       ┃ UNDO      ┃ SOFT OFF  ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃ MIDDLE    ┃ LEFT      ┃ RIGHT     ┃   ┃ RIGHT     ┃ LEFT      ┃ MIDDLE    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
           &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(Z))    &kp LS(LG(Z))  &kp LG(V)  &kp LG(C)  &kp LG(X)  &kp LG(Z)
           &kp LGUI   &kp LCTRL  &kp LALT   &kp LSHFT  &to 0            &to 0          &kp RSHFT  &kp RALT   &kp RCTRL  &kp RGUI
&soft_off  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(Z))    &kp LS(LG(Z))  &kp LG(V)  &kp LG(C)  &kp LG(X)  &kp LG(Z)  &soft_off
                                 &mkp MCLK  &mkp LCLK  &mkp RCLK        &mkp RCLK      &mkp LCLK  &mkp MCLK
            >;
        };
    };
};
